{"ast":null,"code":"var _jsxFileName = \"/Users/gilbertlowrey/Desktop/optimization/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Button from \"./components/UI/Button/Button\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [showParagraph, setShowParagraph] = useState(false);\n  const toggleParagraphHandler = () => {\n    setShowParagraph(perviousShowParagraph => !perviousShowParagraph);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hi there!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), showParagraph && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This is new!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleParagraphHandler,\n      children: \"Toggle Paragraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"eoYUlDKWxWYgikVZpaPr2UN2QyM=\");\n_c = App;\nexport default App;\n\n/* \nQuick useState run down. I want to have a paragraph appear after a given action (timer or click for ex)\nright now, it is not visible, so I set useState() to false. I also destructure an array with the first item\nbeing the showParagraph value (true or false) and the second item being a function I will use to change the state. \nAt the beginning showParagraph is FALSE, when I call or point to setShowParagraph, I can change it to TRUE, or back\nto FALSE if it is TRUE. \n\n{showParagraph && <p>This is new!</p>} looks for showParagraph to be TRUE and shows the paragraph\n\nMy button will show and hide the paragraph, it will toggle it onClick. the toggleParagraphHandler handles this\nit takes the setShowParagraph function, and passes it an argument of an anonymous function that takes a variable \ncalled perviousShowParagraph and reverses its value (from FALSE to TRUE, or from TRUE to FALSE). I could have done\n!showParagraph, but that would depend on the previous useState snap shot, and it is best to avoid that practice. \n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Button","App","showParagraph","setShowParagraph","toggleParagraphHandler","perviousShowParagraph"],"sources":["/Users/gilbertlowrey/Desktop/optimization/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport Button from \"./components/UI/Button/Button\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [showParagraph, setShowParagraph] = useState(false);\n\n  const toggleParagraphHandler = () => {\n    setShowParagraph((perviousShowParagraph) => !perviousShowParagraph);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      {showParagraph && <p>This is new!</p>}\n      <Button onClick={toggleParagraphHandler}>Toggle Paragraph</Button>\n    </div>\n  );\n};\n\nexport default App;\n\n/* \nQuick useState run down. I want to have a paragraph appear after a given action (timer or click for ex)\nright now, it is not visible, so I set useState() to false. I also destructure an array with the first item\nbeing the showParagraph value (true or false) and the second item being a function I will use to change the state. \nAt the beginning showParagraph is FALSE, when I call or point to setShowParagraph, I can change it to TRUE, or back\nto FALSE if it is TRUE. \n\n{showParagraph && <p>This is new!</p>} looks for showParagraph to be TRUE and shows the paragraph\n\nMy button will show and hide the paragraph, it will toggle it onClick. the toggleParagraphHandler handles this\nit takes the setShowParagraph function, and passes it an argument of an anonymous function that takes a variable \ncalled perviousShowParagraph and reverses its value (from FALSE to TRUE, or from TRUE to FALSE). I could have done\n!showParagraph, but that would depend on the previous useState snap shot, and it is best to avoid that practice. \n*/\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,MAAM,MAAM,+BAA+B;AAClD,OAAO,WAAW;AAAC;AAEnB,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMK,sBAAsB,GAAG,MAAM;IACnCD,gBAAgB,CAAEE,qBAAqB,IAAK,CAACA,qBAAqB,CAAC;EACrE,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA,UAAI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAK,EACjBH,aAAa,iBAAI;MAAA,UAAG;IAAY;MAAA;MAAA;MAAA;IAAA,QAAI,eACrC,QAAC,MAAM;MAAC,OAAO,EAAEE,sBAAuB;MAAA,UAAC;IAAgB;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEV,CAAC;AAAC,GAdIH,GAAG;AAAA,KAAHA,GAAG;AAgBT,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}