{"ast":null,"code":"var _jsxFileName = \"/Users/gilbertlowrey/Desktop/optimization/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport Button from \"./components/UI/Button/Button/Button\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [showParagraph, setShowParagraph] = useState(false);\n  const toggleParagraphHandler = () => {\n    setShowParagraph(perviousShowParagraph => !perviousShowParagraph);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hi there!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DemoOutput, {\n      show: showParagraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleParagraphHandler,\n      children: \"Toggle Paragraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"eoYUlDKWxWYgikVZpaPr2UN2QyM=\");\n_c = App;\nexport default App;\n\n/*\nSimple props example\n\nI am giving DemoOutput a props of show, and giving show showParagraph. This will be toggled with the button, \nand this information will be passed to DemoOutput and it will know where to display the populated string\nor the blank string based on whether show is truthy or falsey. \n\nThis component will be re-evaluated and re-executed even thought the change is coming from a different component.\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","DemoOutput","Button","App","showParagraph","setShowParagraph","toggleParagraphHandler","perviousShowParagraph"],"sources":["/Users/gilbertlowrey/Desktop/optimization/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport Button from \"./components/UI/Button/Button/Button\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [showParagraph, setShowParagraph] = useState(false);\n\n  const toggleParagraphHandler = () => {\n    setShowParagraph((perviousShowParagraph) => !perviousShowParagraph);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      <DemoOutput show={showParagraph} />\n      <Button onClick={toggleParagraphHandler}>Toggle Paragraph</Button>\n    </div>\n  );\n};\n\nexport default App;\n\n/*\nSimple props example\n\nI am giving DemoOutput a props of show, and giving show showParagraph. This will be toggled with the button, \nand this information will be passed to DemoOutput and it will know where to display the populated string\nor the blank string based on whether show is truthy or falsey. \n\nThis component will be re-evaluated and re-executed even thought the change is coming from a different component.\n*/\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,UAAU,MAAM,8BAA8B;AACrD,OAAOC,MAAM,MAAM,sCAAsC;AACzD,OAAO,WAAW;AAAC;AAEnB,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMM,sBAAsB,GAAG,MAAM;IACnCD,gBAAgB,CAAEE,qBAAqB,IAAK,CAACA,qBAAqB,CAAC;EACrE,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA,UAAI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAK,eAClB,QAAC,UAAU;MAAC,IAAI,EAAEH;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eACnC,QAAC,MAAM;MAAC,OAAO,EAAEE,sBAAuB;MAAA,UAAC;IAAgB;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEV,CAAC;AAAC,GAdIH,GAAG;AAAA,KAAHA,GAAG;AAgBT,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}