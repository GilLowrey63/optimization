{"ast":null,"code":"var _jsxFileName = \"/Users/gilbertlowrey/Desktop/optimization/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport Button from \"./components/UI/Button/Button/Button\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [showParagraph, setShowParagraph] = useState(false);\n  const toggleParagraphHandler = useCallback(() => {\n    setShowParagraph(perviousShowParagraph => !perviousShowParagraph);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hi there!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DemoOutput, {\n      show: showParagraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleParagraphHandler,\n      children: \"Toggle Paragraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"o+94QVVeAbLkXjGg6euTK4u66EU=\");\n_c = App;\nexport default App;\n\n/*\nuseCallback will help use save functions and not have them re-created every time\nthe component is re-rendered. memo() works like this. In JavaScript if I have\nex1     obj1 {} and obj2 {}, they are not equal\nex2     if I have obj2 {} = obj1 {}, then they become equal. \nex1 is memo() and I can achieve something more like ex2 with useCallback. \n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useCallback","DemoOutput","Button","App","showParagraph","setShowParagraph","toggleParagraphHandler","perviousShowParagraph"],"sources":["/Users/gilbertlowrey/Desktop/optimization/src/App.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\n\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport Button from \"./components/UI/Button/Button/Button\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [showParagraph, setShowParagraph] = useState(false);\n\n  const toggleParagraphHandler = useCallback(() => {\n    setShowParagraph((perviousShowParagraph) => !perviousShowParagraph);\n  });\n\n  return (\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      <DemoOutput show={showParagraph} />\n      <Button onClick={toggleParagraphHandler}>Toggle Paragraph</Button>\n    </div>\n  );\n};\n\nexport default App;\n\n/*\nuseCallback will help use save functions and not have them re-created every time\nthe component is re-rendered. memo() works like this. In JavaScript if I have\nex1     obj1 {} and obj2 {}, they are not equal\nex2     if I have obj2 {} = obj1 {}, then they become equal. \nex1 is memo() and I can achieve something more like ex2 with useCallback. \n*/\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,OAAOC,UAAU,MAAM,8BAA8B;AACrD,OAAOC,MAAM,MAAM,sCAAsC;AACzD,OAAO,WAAW;AAAC;AAEnB,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMO,sBAAsB,GAAGN,WAAW,CAAC,MAAM;IAC/CK,gBAAgB,CAAEE,qBAAqB,IAAK,CAACA,qBAAqB,CAAC;EACrE,CAAC,CAAC;EAEF,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA,UAAI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAK,eAClB,QAAC,UAAU;MAAC,IAAI,EAAEH;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eACnC,QAAC,MAAM;MAAC,OAAO,EAAEE,sBAAuB;MAAA,UAAC;IAAgB;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEV,CAAC;AAAC,GAdIH,GAAG;AAAA,KAAHA,GAAG;AAgBT,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}